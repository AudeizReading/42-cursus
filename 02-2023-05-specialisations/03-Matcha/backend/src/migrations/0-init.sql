CREATE TABLE IF NOT EXISTS user (
	id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
	email TEXT UNIQUE NOT NULL,
	username TEXT UNIQUE NOT NULL,
	firstName TEXT NOT NULL,
	lastName TEXT NOT NULL,
	hashPassword TEXT NOT NULL,
	validateEmail NUMERIC NOT NULL,
	locationType TEXT NOT NULL,
	birthday NUMERIC NULL,
	status TEXT NOT NULL
);
-- 
CREATE TABLE IF NOT EXISTS token (
	id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
	reason TEXT NOT NULL,
	token TEXT UNIQUE NOT NULL,
	expired NUMERIC NOT NULL,
	userId INTEGER NOT NULL,
	FOREIGN KEY (userId) REFERENCES user (id)
);
--
CREATE TABLE IF NOT EXISTS tag (
	id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
	name TEXT NOT NULL UNIQUE
);
--
CREATE TABLE IF NOT EXISTS user_tag (
	id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
	tagId INTEGER NOT NULL,
	userId INTEGER NOT NULL,
	FOREIGN KEY (tagId) REFERENCES tag (id),
	FOREIGN KEY (userId) REFERENCES user (id)
);
--
CREATE TABLE IF NOT EXISTS file (
	id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
	name TEXT UNIQUE NOT NULL,
	originalName TEXT NOT NULL,
	type TEXT NOT NULL,
	context TEXT NOT NULL,
	duration INTEGER NULL,
	width INTEGER NULL,
	height INTEGER NULL,
	size INTEGER NOT NULL
);
--
CREATE TABLE IF NOT EXISTS user_file (
	id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
	fileId INTEGER UNIQUE NOT NULL,
	userId INTEGER NOT NULL,
	FOREIGN KEY (fileId) REFERENCES file (id),
	FOREIGN KEY (userId) REFERENCES user (id)
);
--
CREATE TABLE IF NOT EXISTS default_picture (
	id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
	fileId INTEGER UNIQUE NOT NULL,
	userId INTEGER UNIQUE NOT NULL,
	FOREIGN KEY (fileId) REFERENCES file (id),
	FOREIGN KEY (userId) REFERENCES user (id)
);
--
CREATE TABLE IF NOT EXISTS biography (
	id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
	description TEXT NOT NULL,
	userId INTEGER UNIQUE NOT NULL,
	FOREIGN KEY (userId) REFERENCES user (id)
);
--
CREATE TABLE IF NOT EXISTS gender (
	id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
	gender TEXT NOT NULL,
	userId INTEGER UNIQUE NOT NULL,
	FOREIGN KEY (userId) REFERENCES user (id)
);
--
CREATE TABLE IF NOT EXISTS sexualPreference (
	id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
	preference TEXT NOT NULL,
	userId INTEGER UNIQUE NOT NULL,
	FOREIGN KEY (userId) REFERENCES user (id)
);
--
CREATE TABLE IF NOT EXISTS view (
	id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
	userId INTEGER NOT NULL,
	viewId INTEGER NOT NULL,
	FOREIGN KEY (userId) REFERENCES user (id),
	FOREIGN KEY (viewId) REFERENCES user (id)
);
--
CREATE TABLE IF NOT EXISTS like (
	id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
	userId INTEGER NOT NULL,
	likeId INTEGER NOT NULL,
	FOREIGN KEY (userId) REFERENCES user (id),
	FOREIGN KEY (likeId) REFERENCES user (id)
);
--
CREATE TABLE IF NOT EXISTS locationIP(
	id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
	latitude REAL NOT NULL,
	longitude REAL NOT NULL,
	userId INTEGER NOT NULL UNIQUE,
	createdAt INTEGER NOT NULL,
	updatedAt INTEGER NOT NULL,
	FOREIGN KEY (userId) REFERENCES user (id)
);
--
CREATE TABLE IF NOT EXISTS locationNavigator(
	id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
	latitude REAL NOT NULL,
	longitude REAL NOT NULL,
	userId INTEGER NOT NULL UNIQUE,
	createdAt INTEGER NOT NULL,
	updatedAt INTEGER NOT NULL,
	FOREIGN KEY (userId) REFERENCES user (id)
);
--
CREATE TABLE IF NOT EXISTS locationFake(
	id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
	latitude REAL NOT NULL,
	longitude REAL NOT NULL,
	userId INTEGER NOT NULL UNIQUE,
	createdAt INTEGER NOT NULL,
	updatedAt INTEGER NOT NULL,
	FOREIGN KEY (userId) REFERENCES user (id)
);
--
CREATE TABLE IF NOT EXISTS report(
	id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
	userId INTEGER NOT NULL,
	reportId INTEGER NOT NULL,
	FOREIGN KEY (userId) REFERENCES user (id),
	FOREIGN KEY (reportId) REFERENCES user (id)
);
--
CREATE TABLE IF NOT EXISTS block(
	id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
	userId INTEGER NOT NULL,
	blockId INTEGER NOT NULL,
	FOREIGN KEY (userId) REFERENCES user (id),
	FOREIGN KEY (blockId) REFERENCES user (id)
);
--
CREATE TABLE IF NOT EXISTS message(
	id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
	sendId INTEGER NOT NULL,
	receiveId INTEGER NOT NULL,
	message TEXT NULL,
	fileId INTEGER NULL,
	read NUMERIC NOT NULL,
	FOREIGN KEY (sendId) REFERENCES user (id),
	FOREIGN KEY (receiveId) REFERENCES user (id),
	FOREIGN KEY (fileId) REFERENCES file (id)
);
--
CREATE TABLE IF NOT EXISTS notification(
	id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
	userId INTEGER NOT NULL,
	fromUserId INTEGER NOT NULL,
	type TEXT NOT NULL,
	messageId INTEGER NULL,
	createdAt INTEGER NOT NULL,
	read NUMERIC NOT NULL,
	FOREIGN KEY (userId) REFERENCES user (id),
	FOREIGN KEY (fromUserId) REFERENCES user (id),
	FOREIGN KEY (messageId) REFERENCES message (id)
);
--
CREATE TABLE IF NOT EXISTS oauth(
	id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
	id_oauth TEXT NOT NULL UNIQUE,
	provider TEXT NOT NULL,
	access_token TEXT NOT NULL,
	expires_in number NOT NULL,
	userId number NULL,
	FOREIGN KEY (userId) REFERENCES user (id)
);
--
CREATE TABLE IF NOT EXISTS event(
	id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
	latitude number NULL,
	longitude number NULL,
	userId number NOT NULL,
	matchId number NOT NULL,
	datetime number NOT NULL,
	name TEXT NOT NULL,
	description TEXT NOT NULL,
	fileId number NULL,
	status TEXT NOT NULL,
	FOREIGN KEY (userId) REFERENCES user (id),
	FOREIGN KEY (matchId) REFERENCES user (id),
	FOREIGN KEY (fileId) REFERENCES file (id)
);
--
